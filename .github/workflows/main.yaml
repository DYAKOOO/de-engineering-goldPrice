name: Gold Price Data Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *' # Runs at 00:00 UTC every day

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-west1

jobs:
  deploy:
    name: Deploy to GCP
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ env.PROJECT_ID }}

    - name: List directory contents
      run: ls -la

    - name: Display Dockerfile contents
      run: cat Dockerfile || echo "Dockerfile not found"

    - name: Deploy to Cloud Run
      run: |
        if [ -f Dockerfile ]; then
          echo "Using existing Dockerfile"
          gcloud run deploy gold-price-ingestion \
            --region ${{ env.REGION }} \
            --image gcr.io/${{ env.PROJECT_ID }}/gold-price-ingestion \
            --platform managed \
            --allow-unauthenticated \
            --set-env-vars GCS_BUCKET=gold-price-raw-data,GOLD_API_KEY="${{ secrets.GOLD_API_KEY }}",GOLD_API_BASE_URL=https://www.goldapi.io/api,GOOGLE_CLOUD_PROJECT=${{ env.PROJECT_ID }},PUBSUB_TOPIC=gold-price \
            --service-account goldprice-service-account@${{ env.PROJECT_ID }}.iam.gserviceaccount.com
        else
          echo "No Dockerfile found, using Cloud Run buildpacks"
          gcloud run deploy gold-price-ingestion \
            --source . \
            --region ${{ env.REGION }} \
            --set-env-vars GCS_BUCKET=gold-price-raw-data,GOLD_API_KEY="${{ secrets.GOLD_API_KEY }}",GOLD_API_BASE_URL=https://www.goldapi.io/api,GOOGLE_CLOUD_PROJECT=${{ env.PROJECT_ID }},PUBSUB_TOPIC=gold-price \
            --service-account goldprice-service-account@${{ env.PROJECT_ID }}.iam.gserviceaccount.com \
            --verbosity=debug
        fi

    - name: Display build logs on failure
      if: failure()
      run: |
        gcloud run logs read gold-price-ingestion --region ${{ env.REGION }} --limit=50

    - name: Check Composer Environment Status
      id: check_composer
      run: |
        MAX_RETRIES=10
        RETRY_INTERVAL=60
        for i in $(seq 1 $MAX_RETRIES); do
          STATUS=$(gcloud composer environments describe gold-price-composer --location ${{ env.REGION }} --format="value(state)")
          if [ "$STATUS" = "RUNNING" ]; then
            echo "composer_ready=true" >> $GITHUB_OUTPUT
            break
          elif [ "$STATUS" = "UPDATING" ]; then
            echo "Composer environment is updating. Waiting..."
            sleep $RETRY_INTERVAL
          else
            echo "composer_ready=false" >> $GITHUB_OUTPUT
            exit 1
          fi
        done

    - name: Update Composer Python packages
      if: steps.check_composer.outputs.composer_ready == 'true'
      run: |
        gcloud composer environments update gold-price-composer \
          --location ${{ env.REGION }} \
          --update-pypi-packages-from-file composer_requirements.txt

    - name: Upload DAG and supporting files to Cloud Composer
      if: steps.check_composer.outputs.composer_ready == 'true'
      run: |
        gsutil cp dags/* gs://us-west1-gold-price-compose-71bd680f-bucket/dags/

    - name: Update Composer environment variables
      if: steps.check_composer.outputs.composer_ready == 'true'
      run: |
        gcloud composer environments update gold-price-composer \
          --location ${{ env.REGION }} \
          --update-env-variables=GOLD_API_KEY=${{ secrets.GOLD_API_KEY }},FRED_API_KEY=${{ secrets.FRED_API_KEY }},ALPHA_VANTAGE_API_KEY=${{ secrets.ALPHA_VANTAGE_API_KEY }}

    - name: Test DAG in Composer
      if: steps.check_composer.outputs.composer_ready == 'true'
      run: |
        gcloud composer environments run gold-price-composer \
          --location ${{ env.REGION }} \
          dags -- test gold_price_pipeline

    - name: Trigger Airflow DAG
      if: steps.check_composer.outputs.composer_ready == 'true'
      run: |
        gcloud composer environments run gold-price-composer \
          --location ${{ env.REGION }} \
          dags -- trigger gold_price_pipeline

    - name: Verify BigQuery Data
      run: |
        ROW_COUNT=$(bq query --use_legacy_sql=false --format=csv '
        SELECT COUNT(*) as row_count
        FROM `de-goldprice.gold_price_dataset.gold_prices`
        WHERE DATE(date) = DATE(CURRENT_TIMESTAMP())
        ' | tail -n 1)
        if [ "$ROW_COUNT" -eq "0" ]; then
          echo "No data found for today in BigQuery. This may indicate an issue with the pipeline."
          exit 1
        else
          echo "Found $ROW_COUNT rows for today in BigQuery."
        fi