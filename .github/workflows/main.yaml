name: main

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *' # Runs at 00:00 UTC every day

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-west1

jobs:
  deploy:
    name: Deploy to GCP
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: '1.21'

    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create Service Account Key File
      run: |
        echo '${{ secrets.GCP_SA_KEY }}' > sa-key.json
        chmod 600 sa-key.json

    - name: Check Service Account Key
      run: |
        echo "Checking service account key format..."
        if [ -f sa-key.json ]; then
          jq . sa-key.json
        else
          echo "sa-key.json file not found"
          ls -la
        fi

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ env.PROJECT_ID }}

    - name: Configure Docker
      run: |
        gcloud auth configure-docker gcr.io

    - name: Get latest version and increment
      id: get_version
      run: |
        LATEST_VERSION=$(gcloud container images list-tags gcr.io/${{ env.PROJECT_ID }}/gold-price-producer --format='get(tags)' --sort-by=~tags | grep '^v1\.0\.' | head -n 1)
        PATCH_VERSION=$(echo $LATEST_VERSION | cut -d. -f3)
        NEW_PATCH_VERSION=$((PATCH_VERSION + 1))
        NEW_VERSION="v1.0.$NEW_PATCH_VERSION"
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT

    - name: Build and Push New Version
      env:
        NEW_VERSION: ${{ steps.get_version.outputs.NEW_VERSION }}
      run: |
        docker build -t gcr.io/${{ env.PROJECT_ID }}/gold-price-producer:$NEW_VERSION -f Dockerfile-producer .
        docker push gcr.io/${{ env.PROJECT_ID }}/gold-price-producer:$NEW_VERSION

    - name: Upload code to GCS
      run: |
        gsutil cp clean_transform.py gs://de-goldprice-code/
        gsutil cp load_to_bigquery.py gs://de-goldprice-code/

    - name: Deploy to Cloud Run
      env:
        NEW_VERSION: ${{ steps.get_version.outputs.NEW_VERSION }}
      run: |
        gcloud run deploy gold-price-ingestion \
          --image gcr.io/${{ env.PROJECT_ID }}/gold-price-producer:$NEW_VERSION \
          --region ${{ env.REGION }} \
          --set-env-vars GCS_BUCKET=gold-price-raw-data \
          --service-account goldprice-service-account@${{ env.PROJECT_ID }}.iam.gserviceaccount.com

    - name: Trigger data ingestion
      run: |
        CLOUD_RUN_URL=$(gcloud run services describe gold-price-ingestion --region ${{ env.REGION }} --format='value(status.url)')
        curl -X GET ${CLOUD_RUN_URL}/fetch-and-publish

    - name: Update Cloud Function
      run: |
        gcloud functions deploy process_gold_price \
          --gen2 \
          --runtime python310 \
          --region ${{ env.REGION }} \
          --source . \
          --entry-point process_pubsub \
          --trigger-http \
          --allow-unauthenticated

    - name: Check GCS Bucket Contents
      run: |
        echo "Listing GCS bucket contents..."
        gsutil ls gs://gold-price-raw-data/
        echo "Displaying sample content of a JSON file..."
        gsutil cat gs://gold-price-raw-data/*.json | head -n 5

    - name: Copy Service Account Key to Compute Engine
      run: |
        gcloud compute scp sa-key.json spark-instance:~/ --zone us-west1-a

    - name: Run Spark Jobs
      run: |
        gcloud compute ssh spark-instance --zone us-west1-a --command "
        set -e
        echo 'Downloading code from GCS...'
        gsutil cp gs://de-goldprice-code/*.py .
        echo 'Running Spark jobs...'
        spark-submit \
        --master local[*] \
        --conf spark.hadoop.fs.gs.impl=com.google.cloud.hadoop.fs.gcs.GoogleHadoopFileSystem \
        --conf spark.hadoop.fs.AbstractFileSystem.gs.impl=com.google.cloud.hadoop.fs.gcs.GoogleHadoopFS \
        --conf spark.hadoop.fs.gs.auth.service.account.enable=true \
        --conf spark.hadoop.fs.gs.auth.service.account.json.keyfile=/home/runner/sa-key.json \
        --jars gcs-connector-hadoop3-latest.jar \
        clean_transform.py
        spark-submit \
        --master local[*] \
        --conf spark.hadoop.fs.gs.impl=com.google.cloud.hadoop.fs.gcs.GoogleHadoopFileSystem \
        --conf spark.hadoop.fs.AbstractFileSystem.gs.impl=com.google.cloud.hadoop.fs.gcs.GoogleHadoopFS \
        --conf spark.hadoop.fs.gs.auth.service.account.enable=true \
        --conf spark.hadoop.fs.gs.auth.service.account.json.keyfile=/home/runner/sa-key.json \
        --jars gcs-connector-hadoop3-latest.jar \
        load_to_bigquery.py
        "
      env:
        CLOUDSDK_COMPUTE_ZONE: us-west1-a


    - name: Trigger Cloud Run Service
      run: |
        CLOUD_RUN_URL=$(gcloud run services describe gold-price-ingestion --region ${{ env.REGION }} --format='value(status.url)')
        curl -X GET ${CLOUD_RUN_URL}/fetch-and-publish

    - name: Verify Deployment
      run: |
        gcloud run services describe gold-price-ingestion --region ${{ env.REGION }}
        gcloud functions describe process_gold_price --region ${{ env.REGION }}

    - name: Verify BigQuery Data
      run: |
        bq query --use_legacy_sql=false '
        SELECT COUNT(*) as row_count
        FROM `de-goldprice.gold_price_dataset.gold_prices`
        WHERE DATE(date) = DATE(CURRENT_TIMESTAMP())
        '

    - name: Clean up old images
      run: |
        OLD_VERSIONS=$(gcloud container images list-tags gcr.io/${{ env.PROJECT_ID }}/gold-price-producer --format='get(tags)' --sort-by=~tags | tail -n +6)
        for version in $OLD_VERSIONS; do
          gcloud container images delete gcr.io/${{ env.PROJECT_ID }}/gold-price-producer:$version --quiet
        done